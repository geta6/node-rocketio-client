// Generated by CoffeeScript 1.6.3
var RocketIO, WebSocketIO, events, request,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

events = require('events');

request = require('request');

RocketIO = (function(_super) {
  __extends(RocketIO, _super);

  function RocketIO() {
    this.push = __bind(this.push, this);
    this.connect = __bind(this.connect, this);
    this.type = 'websocket';
    this.config = {};
  }

  RocketIO.prototype.connect = function(url, opts) {
    var _this = this;
    if (opts == null) {
      opts = {
        type: 'websocket'
      };
    }
    return request("" + url + "/rocketio/settings", function(err, res, body) {
      if (err || res.statusCode !== 200) {
        return;
      }
      _this.config = JSON.parse(body);
      _this.io = (function() {
        switch (opts.type) {
          case 'websocket':
            return new WebSocketIO(this);
          case 'comet':
            return new CometIO(this);
        }
      }).call(_this);
      _this.io.on('connect', function() {
        return _this.emit('connect', _this);
      });
      return _this.io.on('disconnect', function() {
        return _this.emit('disconnect', _this);
      });
    });
  };

  RocketIO.prototype.push = function(type, data) {
    return this.io.push(type, data);
  };

  return RocketIO;

})(events.EventEmitter);

WebSocketIO = (function(_super) {
  var WebSocket;

  __extends(WebSocketIO, _super);

  WebSocket = require('ws');

  function WebSocketIO(rocketio) {
    var _this = this;
    this.rocketio = rocketio;
    this.connecting = false;
    this.on('disconnect', function() {
      return setTimeout(function() {
        return _this.connect();
      }, 5000);
    });
    this.connect();
  }

  WebSocketIO.prototype.connect = function() {
    var _this = this;
    this.ws = new WebSocket(this.rocketio.config.websocket);
    this.ws.on('error', function(err) {
      _this.connecting = false;
      return _this.emit('disconnect');
    });
    this.ws.on('close', function() {
      _this.connecting = false;
      return _this.emit('disconnect');
    });
    this.ws.on('open', function() {
      _this.connecting = true;
      return _this.emit('connect');
    });
    return this.ws.on('message', function(data, flags) {
      data = JSON.parse(data);
      return _this.rocketio.emit(data.type, data.data);
    });
  };

  WebSocketIO.prototype.push = function(type, data) {
    if (!this.connecting) {
      return;
    }
    return this.ws.send(JSON.stringify({
      type: type,
      data: data
    }));
  };

  return WebSocketIO;

})(events.EventEmitter);

module.exports = RocketIO;
